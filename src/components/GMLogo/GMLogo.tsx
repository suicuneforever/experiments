/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.12 public/gmlogo.glb --types 
*/

import * as THREE from 'three';
import React, { useLayoutEffect, useRef } from 'react';
import { useGLTF, useScroll } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { gsap } from 'gsap';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    blue: THREE.Mesh;
    green: THREE.Mesh;
    pink: THREE.Mesh;
    yellow: THREE.Mesh;
  };
  materials: {
    ['Material.003']: THREE.MeshStandardMaterial;
    ['Material.004']: THREE.MeshStandardMaterial;
    ['Material.001']: THREE.MeshStandardMaterial;
    ['Material.002']: THREE.MeshStandardMaterial;
  };
};

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>;

export function GMLogo(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/gmlogo.glb') as GLTFResult;
  const group = useRef<THREE.Group>(null!);
  // useRefs
  const pink = useRef<THREE.Mesh>(null!);
  const blue = useRef<THREE.Mesh>(null!);
  const green = useRef<THREE.Mesh>(null!);
  const yellow = useRef<THREE.Mesh>(null!);
  const timeline = useRef<GSAPTimeline>(null!);
  const scroll = useScroll();

  useFrame(({ clock }) => {
    const time = clock.getElapsedTime();
    group.current.position.y = Math.cos(time) * 0.2;

    timeline.current.seek(scroll.offset * timeline.current.duration());

    // console.log(timeline.current.iteration());

    // if (timeline.current.isActive()) {
    //   yellow.current.position.y = Math.cos(time) * 0.2;
    //   green.current.position.y = Math.cos(time) * 0.4;
    //   blue.current.position.y = Math.cos(time) * 0.5;
    //   pink.current.position.y = Math.cos(time) * 0.2;
    // }
  });

  useLayoutEffect(() => {
    timeline.current = gsap.timeline({ defaults: { duration: 2, ease: 'power1.inOut' } });

    timeline.current
      // .to(myMesh.current.position, { z: 1.3 }, 1)
      .to(yellow.current.position, { x: -0.951, y: 2.356, z: -0.084 }, 1)
      .to(green.current.position, { x: 2.324, y: 0.302, z: -5.266 }, 1)
      .to(blue.current.position, { x: -2.231, y: -0.202, z: -0.237 }, 1)
      .to(pink.current.position, { x: -1.401, y: 0.025, z: 1.631 }, 1)

      .to(yellow.current.position, { x: -0.198, y: 1.494, z: -0.737 }, 5)
      .to(green.current.position, { x: -0.198, y: 0.994, z: -0.737 }, 5)
      .to(blue.current.position, { x: -0.198, y: 0.994, z: -0.237 }, 5)
      .to(pink.current.position, { x: -0.198, y: 0.494, z: -0.237 }, 5)

      .to(group.current.rotation, { y: 0.25, z: -0.1 }, 6);
  }, []);

  return (
    <group ref={group} {...props} dispose={null} position={[-0.198, 0.494, 0.5]}>
      <mesh
        ref={yellow}
        geometry={nodes.yellow.geometry}
        material={materials['Material.002']}
        position={[-0.198, 1.494, -0.737]}
      />
      <mesh
        ref={green}
        geometry={nodes.green.geometry}
        material={materials['Material.004']}
        position={[-0.198, 0.994, -0.737]}
      />
      <mesh
        ref={blue}
        geometry={nodes.blue.geometry}
        material={materials['Material.003']}
        position={[-0.198, 0.994, -0.237]}
      />
      <mesh
        ref={pink}
        geometry={nodes.pink.geometry}
        material={materials['Material.001']}
        position={[-0.198, 0.494, -0.237]}
      />
    </group>
  );
}

useGLTF.preload('/gmlogo.glb');
